// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cosmos/mintibc/v1beta1/mintIbc.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintIbc struct {
	TargetAddress string      `protobuf:"bytes,1,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
	Tokencoin     *types.Coin `protobuf:"bytes,2,opt,name=tokencoin,proto3" json:"tokencoin,omitempty"`
}

func (m *MintIbc) Reset()         { *m = MintIbc{} }
func (m *MintIbc) String() string { return proto.CompactTextString(m) }
func (*MintIbc) ProtoMessage()    {}
func (*MintIbc) Descriptor() ([]byte, []int) {
	return fileDescriptor_689a1f1e71736eaa, []int{0}
}
func (m *MintIbc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintIbc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintIbc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintIbc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintIbc.Merge(m, src)
}
func (m *MintIbc) XXX_Size() int {
	return m.Size()
}
func (m *MintIbc) XXX_DiscardUnknown() {
	xxx_messageInfo_MintIbc.DiscardUnknown(m)
}

var xxx_messageInfo_MintIbc proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MintIbc)(nil), "cosmos.mintIbc.v1beta1.MintIbc")
}

func init() {
	proto.RegisterFile("proto/cosmos/mintibc/v1beta1/mintIbc.proto", fileDescriptor_689a1f1e71736eaa)
}

var fileDescriptor_689a1f1e71736eaa = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0x2f, 0xce, 0xcd, 0x2f, 0xd6, 0xcf, 0xcd, 0xcc, 0x2b, 0xc9, 0x4c, 0x4a,
	0xd6, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0x04, 0xf3, 0x3d, 0x93, 0x92, 0xf5, 0xc0, 0x8a,
	0x84, 0xc4, 0x20, 0xaa, 0xf4, 0x60, 0xa2, 0x50, 0x55, 0x52, 0x6a, 0x25, 0x19, 0x99, 0x45, 0x29,
	0xf1, 0x05, 0x89, 0x45, 0x25, 0x95, 0xfa, 0x10, 0xf3, 0xd2, 0xf3, 0xd3, 0xf3, 0x11, 0x2c, 0x88,
	0x7e, 0x29, 0x15, 0x14, 0xbb, 0x92, 0x12, 0x8b, 0x53, 0xe1, 0x16, 0x25, 0xe7, 0x67, 0xe6, 0x41,
	0x54, 0x29, 0x15, 0x71, 0xb1, 0xfb, 0x42, 0x2c, 0x10, 0x52, 0xe1, 0xe2, 0x2d, 0x49, 0x2c, 0x4a,
	0x4f, 0x2d, 0x71, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x42, 0x15, 0x14, 0x32, 0xe7, 0xe2, 0x2c, 0xc9, 0xcf, 0x4e, 0xcd, 0x03, 0x99, 0x21, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa9, 0x07, 0x75, 0x2a, 0xc8, 0x12, 0x98, 0x3b, 0xf5, 0x9c, 0xf3,
	0x33, 0xf3, 0x82, 0x10, 0x6a, 0xad, 0x38, 0x3a, 0x16, 0xc8, 0x33, 0xbc, 0x58, 0x20, 0xcf, 0xe0,
	0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78,
	0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x47, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xcb, 0xaf, 0x73, 0x28, 0x01, 0x00, 0x00,
}

func (m *MintIbc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintIbc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintIbc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tokencoin != nil {
		{
			size, err := m.Tokencoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMintIbc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintMintIbc(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMintIbc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMintIbc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintIbc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovMintIbc(uint64(l))
	}
	if m.Tokencoin != nil {
		l = m.Tokencoin.Size()
		n += 1 + l + sovMintIbc(uint64(l))
	}
	return n
}

func sovMintIbc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMintIbc(x uint64) (n int) {
	return sovMintIbc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintIbc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMintIbc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintIbc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintIbc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintIbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMintIbc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMintIbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokencoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintIbc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMintIbc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMintIbc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tokencoin == nil {
				m.Tokencoin = &types.Coin{}
			}
			if err := m.Tokencoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMintIbc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMintIbc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMintIbc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMintIbc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintIbc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintIbc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMintIbc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMintIbc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMintIbc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMintIbc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMintIbc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMintIbc = fmt.Errorf("proto: unexpected end of group")
)
